package svg.gui;

import config.Configuration;
import java.awt.event.MouseEvent;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import svg.actions.ActionCreateElement;
import svg.actions.ActionMoveElement;
import svg.actions.design.DActionDelete;
import svg.core.*;
import svg.engagement.*;
import svg.eval.*;
import svg.gui.GUIStateMachine.ACTION;
import svg.gui.GUIStateMachine.STATE;
import svg.gui.action.*;
import svg.gui.button.CanvasListener;
import svg.reflection.*;

/**
 * Drawing system employing Engagement - Reflection model
 * @author Ivan Guerrero
 */
@Deprecated
public class SVGDrawingGUI extends javax.swing.JFrame implements IRefreshData, ICanvasListener {
    private SVGRepository repository;
    private SVGAction action;
    private SVGElement elem;
    
    /**
     * Creates new form SVGDrawingGUI
     */
    public SVGDrawingGUI() {
        Configuration.getInstance().loadConfig();
        repository = SVGRepository.getInstance();
        repository.generateSVGDocument();
        SVGAtomStore.getInstance().loadAtoms(SVGConfig.AtomsFile);
        initComponents();
        //bttnQ.setVisible(false);
    }
    
    private void appplyAction(SVGAction action) {
        repository.applyAction(action, elem);
        refreshData();
        GUIStateMachine.actionPerformed(ACTION.ACTION_PERFORMED);
    }

    @Override
    public void refreshData() {
        repository.runDetectors();
        txtActions.setText(repository.getActionDescriptions());
        txtDesignActions.setText(repository.getDesignActionDescriptions());
        txtAnalysis.setText(repository.getDetectorAnalysis());
        txtAnalysis.setCaretPosition(0);
        cbLevels.setLevels();
        canvas.setDocument(repository.getDocument());
        canvas.validate();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tbElements = new javax.swing.JToolBar();
        bttnQ = new svg.gui.button.AddElementButton();
        cbQSize = new javax.swing.JComboBox();
        bttnMove = new svg.gui.button.MoveButton();
        bttnRemove = new svg.gui.button.RemoveButton();
        bttnDesign = new svg.gui.button.EndOfDesignButton();
        bttnRandom = new svg.gui.button.RandomButton(repository, this, true);
        bttnBackground = new svg.gui.button.ManageBackgroundButton(repository, this);
        canvas = new org.apache.batik.swing.JSVGCanvas(null, true, false);
        panelOptions = new javax.swing.JPanel();
        lblAnalysis = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtAnalysis = new javax.swing.JTextArea();
        panelActionsSummary = new javax.swing.JTabbedPane();
        panelActions = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtActions = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtDesignActions = new javax.swing.JTextArea();
        lblStatus = new javax.swing.JLabel();
        txtStatus = new javax.swing.JLabel();
        lblMousePosition = new javax.swing.JLabel();
        tbDesigns = new javax.swing.JToolBar();
        bttnHCopy = new svg.gui.button.SymmetryButton(repository, this, true);
        bttnVCopy = new svg.gui.button.SymmetryButton(repository, this, false);
        bttnHMirroring = new svg.gui.button.MirroringButton(repository, this, MirroringAction.MirroringType.Horizontal);
        bttnVMirroring = new svg.gui.button.MirroringButton(repository, this, MirroringAction.MirroringType.Vertical);
        bttnRadialMirroring = new svg.gui.button.MirroringButton(repository, this, MirroringAction.MirroringType.Radial);
        bttnHBalance = new svg.gui.button.BalanceButton(repository, this, true);
        bttnVBalance = new svg.gui.button.BalanceButton(repository, this, false);
        bttnCreateUnit = new svg.gui.button.CreateUnitButton(repository, this, true);
        bttnCopyUnit = new svg.gui.button.DuplicateUnitButton(repository, canvas, this);
        bttnFocalPoint = new svg.gui.button.FocalPointButton(repository, this);
        bttnAddUnitToDesign = new svg.gui.button.AddUnitToDesignButton(repository, this);
        jSeparator1 = new javax.swing.JToolBar.Separator();
        cbAxis = new javax.swing.JCheckBox();
        cbLevels = new svg.gui.button.LevelComboBox(repository);
        tbElementCreation = new ElementCreationToolBar(this);
        mbDrawing = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        menuSaveImage = new javax.swing.JMenuItem(new SaveImageAction(repository));
        menuSaveStory = new javax.swing.JMenuItem(new SaveStoryAction(repository));
        menuSaveDesign = new javax.swing.JMenuItem(new SaveDesignAction(repository));
        menuLoadStory = new javax.swing.JMenuItem(new LoadStoryAction(repository, this));
        menuLoadDesign = new javax.swing.JMenuItem(new LoadDesignAction(repository, this));
        menuLoadPreviousStory = new javax.swing.JMenuItem(new LoadPreviousStoryAction(repository, this));
        menuDelete = new javax.swing.JMenuItem();
        menuConfig = new javax.swing.JMenuItem();
        menuExit = new javax.swing.JMenuItem();
        menuContext = new javax.swing.JMenu();
        menuViewContext = new javax.swing.JMenuItem(new DisplayContextAction(repository));
        menuSaveContext = new javax.swing.JMenuItem();
        menuAtomViewer = new javax.swing.JMenuItem();
        menuLoadPrevStories = new javax.swing.JMenuItem(new LoadPreviousStoriesAction());
        menuER = new javax.swing.JMenu();
        menuEngagementStep = new javax.swing.JMenuItem(new EngagementAction(repository, this));
        menuReflectionStep = new javax.swing.JMenuItem(new ReflectionAction(repository, this));
        menuCycleStep = new javax.swing.JMenuItem(new ERStepAction(repository, this));
        menuCreateDrawing = new javax.swing.JMenuItem(new CreateDrawingAction(repository, this));
        menuEvaluation = new javax.swing.JMenu();
        menuNoveltyEval = new javax.swing.JMenuItem(new NoveltyEvaluator(repository));
        menuInterestEval = new javax.swing.JMenuItem(new InterestEvaluator(repository));
        menuCoherenceEval = new javax.swing.JMenuItem(new CoherenceEvaluator(repository));
        menuHelp = new javax.swing.JMenu();
        menuShowHelp = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Engagement-Reflection Composer");
        setLocationByPlatform(true);

        tbElements.setFloatable(false);
        tbElements.setOrientation(javax.swing.SwingConstants.VERTICAL);
        tbElements.setRollover(true);

        bttnQ.setToolTipText("Insert an element");
        bttnQ.setFocusable(false);
        bttnQ.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bttnQ.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bttnQ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttnQActionPerformed(evt);
            }
        });
        tbElements.add(bttnQ);

        cbQSize.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3" }));
        cbQSize.setAlignmentX(0.0F);
        cbQSize.setAlignmentY(0.0F);
        cbQSize.setMaximumSize(new java.awt.Dimension(25, 25));
        cbQSize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbQSizeActionPerformed(evt);
            }
        });
        tbElements.add(cbQSize);

        bttnMove.setToolTipText("Move the selected element");
        bttnMove.setFocusable(false);
        bttnMove.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bttnMove.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bttnMove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttnMoveActionPerformed(evt);
            }
        });
        tbElements.add(bttnMove);

        bttnRemove.setToolTipText("Remove the selected element");
        bttnRemove.setFocusable(false);
        bttnRemove.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bttnRemove.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bttnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttnRemoveActionPerformed(evt);
            }
        });
        tbElements.add(bttnRemove);

        bttnDesign.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/endOfDesignIcon.png"))); // NOI18N
        bttnDesign.setToolTipText("Group the previous actions into a design action");
        bttnDesign.setFocusable(false);
        bttnDesign.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bttnDesign.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bttnDesign.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttnDesignActionPerformed(evt);
            }
        });
        tbElements.add(bttnDesign);

        bttnRandom.setToolTipText("Generates a random element");
        bttnRandom.setFocusable(false);
        bttnRandom.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bttnRandom.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tbElements.add(bttnRandom);

        bttnBackground.setToolTipText("Enables / Disables de background image when working in Image mode");
        bttnBackground.setFocusable(false);
        bttnBackground.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bttnBackground.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tbElements.add(bttnBackground);

        canvas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                canvasMouseReleased(evt);
            }
        });
        canvas.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                canvasMouseMoved(evt);
            }
        });

        javax.swing.GroupLayout canvasLayout = new javax.swing.GroupLayout(canvas);
        canvas.setLayout(canvasLayout);
        canvasLayout.setHorizontalGroup(
            canvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
        );
        canvasLayout.setVerticalGroup(
            canvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
        );

        lblAnalysis.setText("Analysis:");

        txtAnalysis.setColumns(20);
        txtAnalysis.setRows(5);
        jScrollPane3.setViewportView(txtAnalysis);

        txtActions.setColumns(20);
        txtActions.setRows(5);
        jScrollPane1.setViewportView(txtActions);

        javax.swing.GroupLayout panelActionsLayout = new javax.swing.GroupLayout(panelActions);
        panelActions.setLayout(panelActionsLayout);
        panelActionsLayout.setHorizontalGroup(
            panelActionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelActionsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 313, Short.MAX_VALUE)
                .addContainerGap())
        );
        panelActionsLayout.setVerticalGroup(
            panelActionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelActionsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE)
                .addContainerGap())
        );

        panelActionsSummary.addTab("Actions", panelActions);

        txtDesignActions.setColumns(20);
        txtDesignActions.setRows(5);
        jScrollPane2.setViewportView(txtDesignActions);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 313, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE)
                .addContainerGap())
        );

        panelActionsSummary.addTab("Design Actions", jPanel1);

        javax.swing.GroupLayout panelOptionsLayout = new javax.swing.GroupLayout(panelOptions);
        panelOptions.setLayout(panelOptionsLayout);
        panelOptionsLayout.setHorizontalGroup(
            panelOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelOptionsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(panelActionsSummary)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelOptionsLayout.createSequentialGroup()
                        .addComponent(lblAnalysis)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelOptionsLayout.setVerticalGroup(
            panelOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelOptionsLayout.createSequentialGroup()
                .addComponent(panelActionsSummary)
                .addGap(18, 18, 18)
                .addComponent(lblAnalysis)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );

        lblStatus.setText("Status: ");

        lblMousePosition.setText("(0,0)");

        tbDesigns.setFloatable(false);
        tbDesigns.setRollover(true);

        bttnHCopy.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/hCopyIcon.png"))); // NOI18N
        bttnHCopy.setToolTipText("Make the drawing H-Symmetric");
        bttnHCopy.setFocusable(false);
        bttnHCopy.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bttnHCopy.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tbDesigns.add(bttnHCopy);

        bttnVCopy.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/vCopyIcon.png"))); // NOI18N
        bttnVCopy.setToolTipText("Make the drawing V-Symmetric");
        bttnVCopy.setFocusable(false);
        bttnVCopy.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bttnVCopy.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tbDesigns.add(bttnVCopy);

        bttnHMirroring.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/hMirrorIcon.png"))); // NOI18N
        bttnHMirroring.setToolTipText("Make the drawing H-Mirrored");
        bttnHMirroring.setFocusable(false);
        bttnHMirroring.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bttnHMirroring.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tbDesigns.add(bttnHMirroring);

        bttnVMirroring.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/vMirrorIcon.png"))); // NOI18N
        bttnVMirroring.setToolTipText("Make the drawing V-Mirrored");
        bttnVMirroring.setFocusable(false);
        bttnVMirroring.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bttnVMirroring.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tbDesigns.add(bttnVMirroring);

        bttnRadialMirroring.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/radialIcon.png"))); // NOI18N
        bttnRadialMirroring.setToolTipText("Make the drawing Radially-Mirrored");
        bttnRadialMirroring.setFocusable(false);
        bttnRadialMirroring.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bttnRadialMirroring.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tbDesigns.add(bttnRadialMirroring);

        bttnHBalance.setText("");
        bttnHBalance.setToolTipText("Make the drawing horizontally balanced");
        bttnHBalance.setFocusable(false);
        bttnHBalance.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bttnHBalance.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tbDesigns.add(bttnHBalance);

        bttnVBalance.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/vBalanceIcon.png"))); // NOI18N
        bttnVBalance.setText("");
        bttnVBalance.setToolTipText("Make the drawing vertically balanced");
        bttnVBalance.setFocusable(false);
        bttnVBalance.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bttnVBalance.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tbDesigns.add(bttnVBalance);

        bttnCreateUnit.setToolTipText("Add a new Unit to the drawing");
        bttnCreateUnit.setFocusable(false);
        bttnCreateUnit.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bttnCreateUnit.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tbDesigns.add(bttnCreateUnit);

        bttnCopyUnit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/copyIcon.png"))); // NOI18N
        bttnCopyUnit.setText("");
        bttnCopyUnit.setToolTipText("Copy a unit");
        bttnCopyUnit.setFocusable(false);
        bttnCopyUnit.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bttnCopyUnit.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tbDesigns.add(bttnCopyUnit);

        bttnFocalPoint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/focalPointIcon.png"))); // NOI18N
        bttnFocalPoint.setText("");
        bttnFocalPoint.setToolTipText("Adds a focal point to the drawing");
        bttnFocalPoint.setFocusable(false);
        bttnFocalPoint.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bttnFocalPoint.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tbDesigns.add(bttnFocalPoint);

        bttnAddUnitToDesign.setText("");
        bttnAddUnitToDesign.setToolTipText("Adds the selected unit to the current design");
        bttnAddUnitToDesign.setFocusable(false);
        tbDesigns.add(bttnAddUnitToDesign);
        tbDesigns.add(jSeparator1);

        cbAxis.setText("Show Axis");
        cbAxis.setFocusable(false);
        cbAxis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbAxisActionPerformed(evt);
            }
        });
        tbDesigns.add(cbAxis);
        tbDesigns.add(cbLevels);

        tbElementCreation.setOrientation(javax.swing.SwingConstants.VERTICAL);
        tbElementCreation.setRollover(true);

        menuFile.setText("File");

        menuSaveImage.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        menuSaveImage.setText("Save drawing");
        menuFile.add(menuSaveImage);

        menuSaveStory.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        menuSaveStory.setText("Save story");
        menuFile.add(menuSaveStory);

        menuSaveDesign.setText("Save design");
        menuFile.add(menuSaveDesign);

        menuLoadStory.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        menuLoadStory.setText("Load story");
        menuFile.add(menuLoadStory);

        menuLoadDesign.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        menuLoadDesign.setText("Load design");
        menuFile.add(menuLoadDesign);

        menuLoadPreviousStory.setText("Load previous story");
        menuFile.add(menuLoadPreviousStory);

        menuDelete.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
        menuDelete.setText("Delete drawing");
        menuDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuDeleteActionPerformed(evt);
            }
        });
        menuFile.add(menuDelete);

        menuConfig.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        menuConfig.setText("Configure");
        menuConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuConfigActionPerformed(evt);
            }
        });
        menuFile.add(menuConfig);

        menuExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        menuExit.setText("Exit");
        menuExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuExitActionPerformed(evt);
            }
        });
        menuFile.add(menuExit);

        mbDrawing.add(menuFile);

        menuContext.setText("Context");

        menuViewContext.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        menuViewContext.setText("View Context");
        menuContext.add(menuViewContext);

        menuSaveContext.setAction(new SaveContextAction(repository));
        menuSaveContext.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        menuSaveContext.setText("Save Context");
        menuContext.add(menuSaveContext);

        menuAtomViewer.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        menuAtomViewer.setText("View Atoms");
        menuAtomViewer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAtomViewerActionPerformed(evt);
            }
        });
        menuContext.add(menuAtomViewer);

        menuLoadPrevStories.setText("Load Previous Stories");
        menuLoadPrevStories.setEnabled(false);
        menuContext.add(menuLoadPrevStories);

        mbDrawing.add(menuContext);

        menuER.setText("E-R");

        menuEngagementStep.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        menuEngagementStep.setText("Engagement Step");
        menuER.add(menuEngagementStep);

        menuReflectionStep.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        menuReflectionStep.setText("Reflection Step");
        menuER.add(menuReflectionStep);

        menuCycleStep.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.ALT_MASK));
        menuCycleStep.setText("E-R Step");
        menuER.add(menuCycleStep);

        menuCreateDrawing.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        menuCreateDrawing.setText("Create Drawing");
        menuER.add(menuCreateDrawing);

        mbDrawing.add(menuER);

        menuEvaluation.setText("Evaluate");

        menuNoveltyEval.setText("Novelty");
        menuEvaluation.add(menuNoveltyEval);

        menuInterestEval.setText("Interestingness");
        menuEvaluation.add(menuInterestEval);

        menuCoherenceEval.setText("Coherence");
        menuEvaluation.add(menuCoherenceEval);

        mbDrawing.add(menuEvaluation);

        menuHelp.setText("Help");

        menuShowHelp.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_MASK));
        menuShowHelp.setText("Show Help");
        menuShowHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuShowHelpActionPerformed(evt);
            }
        });
        menuHelp.add(menuShowHelp);

        mbDrawing.add(menuHelp);

        setJMenuBar(mbDrawing);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tbElements, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tbElementCreation, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(canvas, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tbDesigns, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(lblMousePosition, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(panelOptions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(lblStatus)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblStatus)
                            .addComponent(txtStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6))
                    .addComponent(tbDesigns, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelOptions, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(canvas, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(tbElements, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tbElementCreation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblMousePosition)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void canvasMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_canvasMouseReleased
        if (evt.getButton() == MouseEvent.BUTTON1) {
            GUIStateMachine.actionPerformed(ACTION.MOUSE_CLICK);
            switch(GUIStateMachine.getCurrentState()) {
                case SELECT:
                    elem = repository.getElementAt(evt.getX(), evt.getY());
                    setSelectedElement(elem);
                    setCurrentStatus((elem != null) ? elem.getID() + " selected" : "No element selected");
                    break;
                case PERFORM_INSERT:
                    action = new ActionCreateElement();
                    if (bttnQ.isSelected())
                        elem = bttnQ.getElem();
                    elem.setCenter(evt.getX(), evt.getY());
                    elem.setUserAdded(true);
                    appplyAction(action);
                    break;
                case PERFORM_MOVE:
                    action = bttnMove.getSVGAction();
                    ((ActionMoveElement)action).setNewX(evt.getX());
                    ((ActionMoveElement)action).setNewY(evt.getY());
                    //Allows the element to be moved
                    elem.setUserAdded(false);
                    appplyAction(action);
                    elem.setUserAdded(true);
                    break;
            }
        }
    }//GEN-LAST:event_canvasMouseReleased

    private void bttnQActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttnQActionPerformed
        GUIStateMachine.actionPerformed(ACTION.Q);
        if (GUIStateMachine.getCurrentState() == STATE.SET_LOCATION) {
            setCurrentStatus("Adding element");
        }
        else {
            action = null;
            setCurrentStatus("");
        }
    }//GEN-LAST:event_bttnQActionPerformed

    private void bttnMoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttnMoveActionPerformed
        GUIStateMachine.actionPerformed(ACTION.MOVE);
        if (GUIStateMachine.getCurrentState() == STATE.NEW_LOCATION) {
            setCurrentStatus("Moving element " + elem.getID() + ", select new location");
        }
        else {
            action = null;
            setCurrentStatus("");
        }
    }//GEN-LAST:event_bttnMoveActionPerformed

    private void canvasMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_canvasMouseMoved
        lblMousePosition.setText("(" + evt.getX() + ", " + evt.getY() + ")");
    }//GEN-LAST:event_canvasMouseMoved

    private void cbAxisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbAxisActionPerformed
        repository.setDisplayAxis(cbAxis.isSelected());
        canvas.setDocument(repository.getDocument());
        canvas.validate();
    }//GEN-LAST:event_cbAxisActionPerformed

    private void menuExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuExitActionPerformed
        int option = JOptionPane.showConfirmDialog(this, "Are you sure you want to exit?", "Close application", 
                                                   JOptionPane.YES_NO_OPTION);
        if (option == JOptionPane.OK_OPTION) {
            this.setVisible(false);
            System.exit(0);
        }
    }//GEN-LAST:event_menuExitActionPerformed

    private void bttnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttnRemoveActionPerformed
        if (elem != null) {
            //Sets the user added flag to false, so it can be removed from the canvas
            elem.setUserAdded(false);
            DActionDelete deleteAction = new DActionDelete();
            deleteAction.applyAction(elem, repository);
            refreshData();
            GUIStateMachine.actionPerformed(ACTION.ACTION_PERFORMED);
            setCurrentStatus("Element " + elem.getID() + " removed");
            repository.setCurrentLevel(0);
            elem = null;
        }
    }//GEN-LAST:event_bttnRemoveActionPerformed

    private void menuConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuConfigActionPerformed
        SVGConfigGUI config = new SVGConfigGUI(this, true);
        config.setVisible(true);
    }//GEN-LAST:event_menuConfigActionPerformed

    private void menuShowHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuShowHelpActionPerformed
        HelpDrawingGUI help = new HelpDrawingGUI(this, true);
        help.setVisible(true);
    }//GEN-LAST:event_menuShowHelpActionPerformed

    private void menuDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuDeleteActionPerformed
        int option = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete the current drawing?", 
                                                   "Delete drawing", 
                                                   JOptionPane.YES_NO_OPTION);
        if (option == JOptionPane.OK_OPTION) {
            deleteDrawing();
        }
    }//GEN-LAST:event_menuDeleteActionPerformed

    private void bttnDesignActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttnDesignActionPerformed
        repository.getActions().get(repository.getActions().size()-1).setEndOfDesignAction();
        txtActions.setText(repository.getActionDescriptions());
        txtDesignActions.setText(repository.getDesignActionDescriptions());
    }//GEN-LAST:event_bttnDesignActionPerformed

    private void menuAtomViewerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAtomViewerActionPerformed
        AtomViewer viewer = new AtomViewer(this, true);
        viewer.setVisible(true);
    }//GEN-LAST:event_menuAtomViewerActionPerformed

    private void cbQSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbQSizeActionPerformed
        bttnQ.setQSize(cbQSize.getSelectedIndex()+1);
    }//GEN-LAST:event_cbQSizeActionPerformed

    @Override
    public void setSelectedElement(SVGElement elem) {
        repository.selectElement(elem);
        canvas.setDocument(repository.getDocument());
        canvas.validate();
        txtAnalysis.setText(repository.getDetectorAnalysis());
        txtAnalysis.setCaretPosition(0);
    }

    @Override
    public SVGElement getSelectedElement() {
        return elem;
    }

    @Override
    public void deleteDrawing() {
        GUIStateMachine.restart();
        bttnQ.setSelected(false);
        bttnMove.setSelected(false);
        repository.generateSVGDocument();
        setCurrentStatus("");
        refreshData();
        ((EngagementAction)menuEngagementStep.getAction()).resetDrawing();
    }

    @Override
    public void setCurrentStatus(String status) {
        txtStatus.setText(status);
    }
    
    public void createElement(boolean isSelected) {
        bttnQ.setSelected(isSelected);
        bttnQActionPerformed(null);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            Logger.getLogger(SVGDrawingGUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SVGDrawingGUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private svg.gui.button.AddUnitToDesignButton bttnAddUnitToDesign;
    private svg.gui.button.ManageBackgroundButton bttnBackground;
    private svg.gui.button.DuplicateUnitButton bttnCopyUnit;
    private svg.gui.button.CreateUnitButton bttnCreateUnit;
    private svg.gui.button.EndOfDesignButton bttnDesign;
    private svg.gui.button.FocalPointButton bttnFocalPoint;
    private svg.gui.button.BalanceButton bttnHBalance;
    private svg.gui.button.SymmetryButton bttnHCopy;
    private svg.gui.button.MirroringButton bttnHMirroring;
    private svg.gui.button.MoveButton bttnMove;
    private svg.gui.button.AddElementButton bttnQ;
    private svg.gui.button.MirroringButton bttnRadialMirroring;
    private svg.gui.button.RandomButton bttnRandom;
    private svg.gui.button.RemoveButton bttnRemove;
    private svg.gui.button.BalanceButton bttnVBalance;
    private svg.gui.button.SymmetryButton bttnVCopy;
    private svg.gui.button.MirroringButton bttnVMirroring;
    private org.apache.batik.swing.JSVGCanvas canvas;
    private javax.swing.JCheckBox cbAxis;
    private svg.gui.button.LevelComboBox cbLevels;
    private javax.swing.JComboBox cbQSize;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JLabel lblAnalysis;
    private javax.swing.JLabel lblMousePosition;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JMenuBar mbDrawing;
    private javax.swing.JMenuItem menuAtomViewer;
    private javax.swing.JMenuItem menuCoherenceEval;
    private javax.swing.JMenuItem menuConfig;
    private javax.swing.JMenu menuContext;
    private javax.swing.JMenuItem menuCreateDrawing;
    private javax.swing.JMenuItem menuCycleStep;
    private javax.swing.JMenuItem menuDelete;
    private javax.swing.JMenu menuER;
    private javax.swing.JMenuItem menuEngagementStep;
    private javax.swing.JMenu menuEvaluation;
    private javax.swing.JMenuItem menuExit;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenu menuHelp;
    private javax.swing.JMenuItem menuInterestEval;
    private javax.swing.JMenuItem menuLoadDesign;
    private javax.swing.JMenuItem menuLoadPrevStories;
    private javax.swing.JMenuItem menuLoadPreviousStory;
    private javax.swing.JMenuItem menuLoadStory;
    private javax.swing.JMenuItem menuNoveltyEval;
    private javax.swing.JMenuItem menuReflectionStep;
    private javax.swing.JMenuItem menuSaveContext;
    private javax.swing.JMenuItem menuSaveDesign;
    private javax.swing.JMenuItem menuSaveImage;
    private javax.swing.JMenuItem menuSaveStory;
    private javax.swing.JMenuItem menuShowHelp;
    private javax.swing.JMenuItem menuViewContext;
    private javax.swing.JPanel panelActions;
    private javax.swing.JTabbedPane panelActionsSummary;
    private javax.swing.JPanel panelOptions;
    private javax.swing.JToolBar tbDesigns;
    private svg.gui.ElementCreationToolBar tbElementCreation;
    private javax.swing.JToolBar tbElements;
    private javax.swing.JTextArea txtActions;
    private javax.swing.JTextArea txtAnalysis;
    private javax.swing.JTextArea txtDesignActions;
    private javax.swing.JLabel txtStatus;
    // End of variables declaration//GEN-END:variables

    @Override
    public void adminListener(CanvasListener button) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public boolean isSnapToGrid() {
        throw new UnsupportedOperationException("Not supported yet.");
    }
}