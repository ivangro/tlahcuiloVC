package svg.gui;

import config.Configuration;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import svg.actions.design.DActionAlign;
import svg.core.SVGConfig;
import svg.core.SVGElement;
import svg.core.SVGRepository;
import svg.elems.SVGElementSelector;
import svg.engagement.EngagementAction;
import svg.engagement.SVGAtomStore;
import svg.eval.*;
import svg.gui.action.*;
import svg.gui.button.*;
import svg.reflection.ReflectionAction;

/**
 * Main class for the ER-Drawing
 * @author Ivan Guerrero
 */
public class ERDrawingGUI extends javax.swing.JFrame implements IRefreshData, ICanvasListener {
    private SVGRepository repository;
    private SVGElement elem;
    private boolean snapToGrid;
    
    /**
     * Creates new form ERDrawingGUI
     */
    public ERDrawingGUI() {
        Configuration.getInstance().loadConfig();
        repository = SVGRepository.getInstance();
        repository.generateSVGDocument();
        SVGAtomStore.getInstance().loadAtoms(SVGConfig.AtomsFile);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        canvas = new org.apache.batik.swing.JSVGCanvas();
        lblMousePosition = new javax.swing.JLabel();
        tbDrawingTools = new javax.swing.JToolBar();
        bttnHSymmetry = new SymmetryButton(repository, this, true);
        bttnVSymmetry = new SymmetryButton(repository, this, false);
        bttnHMirroring = new MirroringButton(repository, this, MirroringAction.MirroringType.Horizontal);
        bttnVMirroring = new MirroringButton(repository, this, MirroringAction.MirroringType.Vertical);
        bttnRMirroring = new MirroringButton(repository, this, MirroringAction.MirroringType.Radial);
        bttnHBalance = new BalanceButton(repository, this, true);
        bttnVBalance = new svg.gui.button.BalanceButton(repository, this, false);
        bttnDistribute = new DistributeButton(repository, this);
        bttnBottomAlign = new AlignButton(repository, this, DActionAlign.Align.BOTTOM);
        bttnTopAlign = new AlignButton(repository, this, DActionAlign.Align.TOP);
        bttnLeftAlign = new AlignButton(repository, this, DActionAlign.Align.LEFT);
        bttnRightAlign = new AlignButton(repository, this, DActionAlign.Align.RIGHT);
        bttnDuplicate = new DuplicateUnitButton(repository, canvas, this);
        bttnSelectUnit = new SelectUnitButton(repository, this, true);
        bttnCreateGroup = new CreateUnitButton(repository, this, true);
        bttnAddGroupToDesign = new AddUnitToDesignButton(repository, this);
        tbOptions = new javax.swing.JToolBar();
        tbCreation = new ElementCreationToolBar(this);
        bttnRemove = new RemoveButton(new RemoveElementAction(repository, this));
        bttnMove = new MoveButton(this);
        bttnEODesign = new EndOfDesignButton(new EndOfDesignStepAction(repository));
        bttnRandomElement = new RandomButton(repository, this, true);
        lblStatus = new javax.swing.JLabel();
        txtStatus = new javax.swing.JLabel();
        cbAxis = new javax.swing.JCheckBox();
        cbLevel = new LevelComboBox(repository);
        lblLevel = new javax.swing.JLabel();
        cbGrid = new javax.swing.JCheckBox();
        mbDrawing = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        menuSaveImage = new JMenuItem(new SaveImageAction(repository));
        menuSaveStory = new JMenuItem(new SaveStoryAction(repository));
        menuSaveDesign = new JMenuItem(new SaveDesignAction(repository));
        menuLoadStory = new JMenuItem(new LoadStoryAction(repository, this));
        menuLoadDesign = new JMenuItem(new LoadDesignAction(repository, this));
        menuLoadInspiringDrawing = new JMenuItem(new LoadPreviousStoryAction(repository, this));
        menuDeleteDrawing = new JMenuItem(new DeleteDrawingAction(repository, this));
        menuConfig = new JMenuItem(new ConfigurationAction());
        menuExit = new javax.swing.JMenuItem();
        menuContext = new javax.swing.JMenu();
        menuViewContext = new JMenuItem(new DisplayContextAction(repository));
        menuViewAtoms = new JMenuItem(new DisplayAtomsAction());
        menuResults = new JMenuItem(new DisplayAnalysisAction(repository));
        menuShapes = new JMenuItem(new DisplayShapesAction(repository));
        menuCreateAtoms = new JMenuItem(new SaveContextAction(repository));
        menuCompareContext = new JMenuItem(new CompareContextsAction(repository, this));
        menuAtomsCatalog = new JMenuItem(new ViewAtomsCatalogAction(repository));
        menuER = new javax.swing.JMenu();
        menuEngagement = new JMenuItem(new EngagementAction(repository, this));
        menuReflection = new JMenuItem(new ReflectionAction(repository, this));
        menuCreateDrawing = new JMenuItem(new CreateDrawingAction(repository, this));
        menuEvaluation = new javax.swing.JMenu();
        menuEvaluateNovelty = new JMenuItem(new NoveltyEvaluator(repository));
        menuEvaluateInterestingness = new JMenuItem(new InterestEvaluator(repository));
        menuEvaluateCoherence = new JMenuItem(new CoherenceEvaluator(repository));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ER-Composer");

        canvas.setMaximumSize(new java.awt.Dimension(800, 550));
        canvas.setMinimumSize(new java.awt.Dimension(800, 550));
        canvas.setMySize(new java.awt.Dimension(800, 550));
        canvas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                canvasMouseReleased(evt);
            }
        });
        canvas.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                canvasMouseMoved(evt);
            }
        });
        canvas.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                canvasKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout canvasLayout = new javax.swing.GroupLayout(canvas);
        canvas.setLayout(canvasLayout);
        canvasLayout.setHorizontalGroup(
            canvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        canvasLayout.setVerticalGroup(
            canvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        lblMousePosition.setText("(0,0)");

        tbDrawingTools.setFloatable(false);
        tbDrawingTools.setRollover(true);

        bttnHSymmetry.setToolTipText("Make the drawing H-Symmetric");
        bttnHSymmetry.setFocusable(false);
        bttnHSymmetry.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bttnHSymmetry.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tbDrawingTools.add(bttnHSymmetry);

        bttnVSymmetry.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/vCopyIcon.png"))); // NOI18N
        bttnVSymmetry.setToolTipText("Make the drawing V-Symmetric");
        bttnVSymmetry.setFocusable(false);
        bttnVSymmetry.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bttnVSymmetry.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tbDrawingTools.add(bttnVSymmetry);

        bttnHMirroring.setToolTipText("Make the drawing H-Mirrored");
        bttnHMirroring.setFocusable(false);
        bttnHMirroring.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bttnHMirroring.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tbDrawingTools.add(bttnHMirroring);

        bttnVMirroring.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/vMirrorIcon.png"))); // NOI18N
        bttnVMirroring.setToolTipText("Make the drawing V-Mirrored");
        bttnVMirroring.setFocusable(false);
        bttnVMirroring.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bttnVMirroring.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tbDrawingTools.add(bttnVMirroring);

        bttnRMirroring.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/radialIcon.png"))); // NOI18N
        bttnRMirroring.setToolTipText("Make the drawing Radially-Mirrored");
        bttnRMirroring.setFocusable(false);
        bttnRMirroring.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bttnRMirroring.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tbDrawingTools.add(bttnRMirroring);

        bttnHBalance.setText("");
        bttnHBalance.setToolTipText("Make the drawing horizontally balanced");
        bttnHBalance.setFocusable(false);
        bttnHBalance.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bttnHBalance.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tbDrawingTools.add(bttnHBalance);

        bttnVBalance.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/vBalanceIcon.png"))); // NOI18N
        bttnVBalance.setText("");
        bttnVBalance.setToolTipText("Make the drawing vertically balanced");
        bttnVBalance.setFocusable(false);
        bttnVBalance.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bttnVBalance.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tbDrawingTools.add(bttnVBalance);

        bttnDistribute.setToolTipText("Distribute the elements inside the group");
        bttnDistribute.setFocusable(false);
        bttnDistribute.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bttnDistribute.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tbDrawingTools.add(bttnDistribute);

        bttnBottomAlign.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/bottomAlignIcon.png"))); // NOI18N
        bttnBottomAlign.setToolTipText("Align the groups to the bottom of the canvas");
        bttnBottomAlign.setFocusable(false);
        bttnBottomAlign.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bttnBottomAlign.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tbDrawingTools.add(bttnBottomAlign);

        bttnTopAlign.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/topAlignIcon.png"))); // NOI18N
        bttnTopAlign.setToolTipText("Align the groups to the top of the canvas");
        bttnTopAlign.setFocusable(false);
        bttnTopAlign.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bttnTopAlign.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tbDrawingTools.add(bttnTopAlign);

        bttnLeftAlign.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/leftAlignIcon.png"))); // NOI18N
        bttnLeftAlign.setToolTipText("Align the groups to the left of the canvas");
        bttnLeftAlign.setFocusable(false);
        bttnLeftAlign.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bttnLeftAlign.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tbDrawingTools.add(bttnLeftAlign);

        bttnRightAlign.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/rightAlignIcon.png"))); // NOI18N
        bttnRightAlign.setToolTipText("Align the groups to the right of the canvas");
        bttnRightAlign.setFocusable(false);
        bttnRightAlign.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bttnRightAlign.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tbDrawingTools.add(bttnRightAlign);

        bttnDuplicate.setText("");
        bttnDuplicate.setToolTipText("Copy the selected group");
        bttnDuplicate.setFocusable(false);
        bttnDuplicate.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bttnDuplicate.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tbDrawingTools.add(bttnDuplicate);

        bttnSelectUnit.setToolTipText("Select the shape of the unit to add");
        bttnSelectUnit.setFocusable(false);
        bttnSelectUnit.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bttnSelectUnit.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tbDrawingTools.add(bttnSelectUnit);

        bttnCreateGroup.setToolTipText("Create a random group");
        bttnCreateGroup.setFocusable(false);
        bttnCreateGroup.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bttnCreateGroup.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tbDrawingTools.add(bttnCreateGroup);

        bttnAddGroupToDesign.setText("");
        bttnAddGroupToDesign.setToolTipText("Create a design action for the selected group");
        bttnAddGroupToDesign.setFocusable(false);
        bttnAddGroupToDesign.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bttnAddGroupToDesign.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tbDrawingTools.add(bttnAddGroupToDesign);

        tbOptions.setFloatable(false);
        tbOptions.setOrientation(javax.swing.SwingConstants.VERTICAL);
        tbOptions.setRollover(true);

        tbCreation.setFloatable(false);
        tbCreation.setOrientation(javax.swing.SwingConstants.VERTICAL);
        tbCreation.setRollover(true);
        tbOptions.add(tbCreation);

        bttnRemove.setToolTipText("Deletes the selected element");
        bttnRemove.setFocusable(false);
        bttnRemove.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bttnRemove.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tbOptions.add(bttnRemove);

        bttnMove.setToolTipText("Move the selected element to the new location");
        bttnMove.setFocusable(false);
        bttnMove.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bttnMove.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tbOptions.add(bttnMove);

        bttnEODesign.setText("");
        bttnEODesign.setToolTipText("Sets/Releases the last action performed as end of design");
        bttnEODesign.setFocusable(false);
        bttnEODesign.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bttnEODesign.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tbOptions.add(bttnEODesign);

        bttnRandomElement.setToolTipText("Creates a random element");
        bttnRandomElement.setFocusable(false);
        bttnRandomElement.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bttnRandomElement.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tbOptions.add(bttnRandomElement);

        lblStatus.setText("Status:");

        txtStatus.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        txtStatus.setText("Select an action...");

        cbAxis.setText("Show axis");
        cbAxis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbAxisActionPerformed(evt);
            }
        });

        lblLevel.setText("Level:");

        cbGrid.setText("Snap to grid");
        cbGrid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbGridActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        menuSaveImage.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        menuSaveImage.setText("Save image");
        jMenu1.add(menuSaveImage);

        menuSaveStory.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        menuSaveStory.setText("Save image steps");
        jMenu1.add(menuSaveStory);

        menuSaveDesign.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.SHIFT_MASK));
        menuSaveDesign.setText("Save image design");
        jMenu1.add(menuSaveDesign);

        menuLoadStory.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        menuLoadStory.setText("Load image steps");
        jMenu1.add(menuLoadStory);

        menuLoadDesign.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.SHIFT_MASK));
        menuLoadDesign.setText("Load design");
        jMenu1.add(menuLoadDesign);

        menuLoadInspiringDrawing.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        menuLoadInspiringDrawing.setText("Load inspiring drawing");
        jMenu1.add(menuLoadInspiringDrawing);

        menuDeleteDrawing.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
        menuDeleteDrawing.setText("Delete drawing");
        jMenu1.add(menuDeleteDrawing);

        menuConfig.setText("Config");
        jMenu1.add(menuConfig);

        menuExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        menuExit.setText("Exit");
        menuExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuExitActionPerformed(evt);
            }
        });
        jMenu1.add(menuExit);

        mbDrawing.add(jMenu1);

        menuContext.setText("Context");

        menuViewContext.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        menuViewContext.setText("View contexts");
        menuContext.add(menuViewContext);

        menuViewAtoms.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        menuViewAtoms.setText("View atoms");
        menuContext.add(menuViewAtoms);

        menuResults.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        menuResults.setText("View results");
        menuContext.add(menuResults);

        menuShapes.setText("View shapes");
        menuContext.add(menuShapes);

        menuCreateAtoms.setText("Convert context to atom");
        menuContext.add(menuCreateAtoms);

        menuCompareContext.setText("Compare context with atoms");
        menuContext.add(menuCompareContext);

        menuAtomsCatalog.setText("Atoms' catalog");
        menuContext.add(menuAtomsCatalog);

        mbDrawing.add(menuContext);

        menuER.setText("E-R");

        menuEngagement.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        menuEngagement.setText("Engagement step");
        menuER.add(menuEngagement);

        menuReflection.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        menuReflection.setText("Reflection step");
        menuER.add(menuReflection);

        menuCreateDrawing.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        menuCreateDrawing.setText("Create new drawing");
        menuER.add(menuCreateDrawing);

        mbDrawing.add(menuER);

        menuEvaluation.setText("Evaluation");

        menuEvaluateNovelty.setText("Evaluate novelty");
        menuEvaluation.add(menuEvaluateNovelty);

        menuEvaluateInterestingness.setText("Evaluate interestingness");
        menuEvaluation.add(menuEvaluateInterestingness);

        menuEvaluateCoherence.setText("Evaluate coherence");
        menuEvaluation.add(menuEvaluateCoherence);

        mbDrawing.add(menuEvaluation);

        setJMenuBar(mbDrawing);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(tbOptions, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(tbDrawingTools, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cbAxis)
                        .addGap(18, 18, 18)
                        .addComponent(cbGrid)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 312, Short.MAX_VALUE)
                        .addComponent(lblLevel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbLevel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(58, 58, 58)
                        .addComponent(lblStatus)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(canvas, javax.swing.GroupLayout.DEFAULT_SIZE, 802, Short.MAX_VALUE)
                    .addComponent(lblMousePosition))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tbDrawingTools, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblStatus)
                    .addComponent(txtStatus)
                    .addComponent(cbAxis)
                    .addComponent(cbLevel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblLevel)
                    .addComponent(cbGrid))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 11, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(tbOptions, javax.swing.GroupLayout.DEFAULT_SIZE, 550, Short.MAX_VALUE)
                    .addComponent(canvas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblMousePosition)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void canvasMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_canvasMouseMoved
        lblMousePosition.setText("(" + evt.getX() + ", " + evt.getY() + ")");
    }//GEN-LAST:event_canvasMouseMoved

    private void cbAxisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbAxisActionPerformed
        repository.setDisplayAxis(cbAxis.isSelected());
        canvas.setDocument(repository.getDocument());
        canvas.validate();
    }//GEN-LAST:event_cbAxisActionPerformed

    private void canvasMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_canvasMouseReleased
        if (evt.getButton() == MouseEvent.BUTTON1) {
            elem = repository.getElementAt(evt.getX(), evt.getY());
            setSelectedElement(elem, !evt.isShiftDown());
            setCurrentStatus((elem != null) ? elem.getID() + " selected" : "No element selected");
        }
    }//GEN-LAST:event_canvasMouseReleased

    private void menuExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuExitActionPerformed
        int option = JOptionPane.showConfirmDialog(this, "Are you sure you want to exit?", "Close application", 
                                                   JOptionPane.YES_NO_OPTION);
        if (option == JOptionPane.OK_OPTION) {
            this.setVisible(false);
            System.exit(0);
        }
    }//GEN-LAST:event_menuExitActionPerformed

    private void cbGridActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbGridActionPerformed
        snapToGrid = ((JCheckBox)evt.getSource()).isSelected();
    }//GEN-LAST:event_cbGridActionPerformed

    private void canvasKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_canvasKeyReleased
        if (evt.getModifiers() == KeyEvent.CTRL_MASK) {
            try {
                switch (evt.getKeyCode()) {
                    case KeyEvent.VK_M: bttnMove.doClick(); break;
                    case KeyEvent.VK_G: bttnAddGroupToDesign.doClick(); break;
                    default:
                        int level = Integer.parseInt(evt.getKeyChar() + "");
                        if (cbLevel.getModel().getSize() > level)
                            cbLevel.setSelectedIndex(level);
                }
            } catch (Exception ex) {}
        }
        else if (evt.getKeyChar() == KeyEvent.VK_DELETE) {
            bttnRemove.doClick();
        }
    }//GEN-LAST:event_canvasKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            Logger.getGlobal().log(Level.SEVERE, null, ex);
        }
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new ERDrawingGUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private svg.gui.button.AddUnitToDesignButton bttnAddGroupToDesign;
    private svg.gui.button.AlignButton bttnBottomAlign;
    private svg.gui.button.CreateUnitButton bttnCreateGroup;
    private svg.gui.button.DistributeButton bttnDistribute;
    private svg.gui.button.DuplicateUnitButton bttnDuplicate;
    private svg.gui.button.EndOfDesignButton bttnEODesign;
    private svg.gui.button.BalanceButton bttnHBalance;
    private svg.gui.button.MirroringButton bttnHMirroring;
    private svg.gui.button.SymmetryButton bttnHSymmetry;
    private svg.gui.button.AlignButton bttnLeftAlign;
    private svg.gui.button.MoveButton bttnMove;
    private svg.gui.button.MirroringButton bttnRMirroring;
    private svg.gui.button.RandomButton bttnRandomElement;
    private svg.gui.button.RemoveButton bttnRemove;
    private svg.gui.button.AlignButton bttnRightAlign;
    private svg.gui.button.SelectUnitButton bttnSelectUnit;
    private svg.gui.button.AlignButton bttnTopAlign;
    private svg.gui.button.BalanceButton bttnVBalance;
    private svg.gui.button.MirroringButton bttnVMirroring;
    private svg.gui.button.SymmetryButton bttnVSymmetry;
    private org.apache.batik.swing.JSVGCanvas canvas;
    private javax.swing.JCheckBox cbAxis;
    private javax.swing.JCheckBox cbGrid;
    private svg.gui.button.LevelComboBox cbLevel;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JLabel lblLevel;
    private javax.swing.JLabel lblMousePosition;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JMenuBar mbDrawing;
    private javax.swing.JMenuItem menuAtomsCatalog;
    private javax.swing.JMenuItem menuCompareContext;
    private javax.swing.JMenuItem menuConfig;
    private javax.swing.JMenu menuContext;
    private javax.swing.JMenuItem menuCreateAtoms;
    private javax.swing.JMenuItem menuCreateDrawing;
    private javax.swing.JMenuItem menuDeleteDrawing;
    private javax.swing.JMenu menuER;
    private javax.swing.JMenuItem menuEngagement;
    private javax.swing.JMenuItem menuEvaluateCoherence;
    private javax.swing.JMenuItem menuEvaluateInterestingness;
    private javax.swing.JMenuItem menuEvaluateNovelty;
    private javax.swing.JMenu menuEvaluation;
    private javax.swing.JMenuItem menuExit;
    private javax.swing.JMenuItem menuLoadDesign;
    private javax.swing.JMenuItem menuLoadInspiringDrawing;
    private javax.swing.JMenuItem menuLoadStory;
    private javax.swing.JMenuItem menuReflection;
    private javax.swing.JMenuItem menuResults;
    private javax.swing.JMenuItem menuSaveDesign;
    private javax.swing.JMenuItem menuSaveImage;
    private javax.swing.JMenuItem menuSaveStory;
    private javax.swing.JMenuItem menuShapes;
    private javax.swing.JMenuItem menuViewAtoms;
    private javax.swing.JMenuItem menuViewContext;
    private svg.gui.ElementCreationToolBar tbCreation;
    private javax.swing.JToolBar tbDrawingTools;
    private javax.swing.JToolBar tbOptions;
    private javax.swing.JLabel txtStatus;
    // End of variables declaration//GEN-END:variables

    @Override
    public void refreshData() {
        repository.runDetectors();
        canvas.setDocument(repository.getDocument());
        canvas.validate();
        cbLevel.setLevels();
    }

    @Override
    public SVGElement getSelectedElement() {
        SVGElementSelector selector = repository.getElementSelector();
        Set<SVGElement> selectedElements;
        if (selector != null) {
            selectedElements = selector.getSelectedElements();
            if (!selectedElements.isEmpty())
                return selectedElements.iterator().next();
        }
        
        return null;
    }
    
    @Override
    public void setSelectedElement(SVGElement elem) {
        setSelectedElement(elem, true);
    }
    
    /**
     * Method employed for multiple selection of elements on the canvas
     * @param elem
     * @param unselectPrevious
     */
    private void setSelectedElement(SVGElement elem, boolean unselectPrevious) {
        repository.selectElement(elem, unselectPrevious);
        canvas.setDocument(repository.getDocument());
        canvas.validate();
    }

    @Override
    public void deleteDrawing() {
        repository.generateSVGDocument();
        setCurrentStatus("");
        refreshData();
        ((EngagementAction)menuEngagement.getAction()).resetDrawing();
    }

    @Override
    public void setCurrentStatus(String status) {
        if (status != null)
            txtStatus.setText(status);
        else
            txtStatus.setText("");
    }

    @Override
    public void adminListener(final CanvasListener button) {
        if (button.isSelected()) {
            tbCreation.releaseAddElementButtons(button);
            button.setElem(elem);
            canvas.addMouseListener(new java.awt.event.MouseAdapter() {
                @Override
                public void mouseReleased(java.awt.event.MouseEvent evt) {
                    int x, y;
                    x = (snapToGrid) ? evt.getX() / SVGConfig.GRID_SIZE * SVGConfig.GRID_SIZE : evt.getX();
                    y = (snapToGrid) ? evt.getY() / SVGConfig.GRID_SIZE * SVGConfig.GRID_SIZE : evt.getY();
                    button.setCoordX(x);
                    button.setCoordY(y);
                    repository.applyAction(button.getSVGAction(), button.getElem());
                    refreshData();
                }
            });
        }
        else {
            MouseListener[] listeners = canvas.getMouseListeners();
            if (listeners.length > 1)
                canvas.removeMouseListener(listeners[listeners.length-1]);
        }
    }

    @Override
    public boolean isSnapToGrid() {
        return snapToGrid;
    }
}
