package svg.gui;

import edu.uci.ics.jung.algorithms.layout.CircleLayout;
import edu.uci.ics.jung.algorithms.layout.Layout;
import edu.uci.ics.jung.graph.Graph;
import edu.uci.ics.jung.visualization.BasicVisualizationServer;
import edu.uci.ics.jung.visualization.VisualizationViewer;
import edu.uci.ics.jung.visualization.control.DefaultModalGraphMouse;
import edu.uci.ics.jung.visualization.control.ModalGraphMouse;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.util.Map;
import javax.swing.*;
import org.apache.commons.collections15.Transformer;
import svg.context.SVGEdge;
import svg.context.SimpleElement;
import svg.core.SVGElement;
import svg.core.SVGRepository;
import svg.engagement.*;

/**
 *
 * @author ivang_000
 */
public class AtomComparerGUI extends javax.swing.JDialog {
    private SVGRepository repository;
    private int currentLevel;
    
    /**
     * Creates new form AtomComparerGUI
     */
    public AtomComparerGUI(java.awt.Frame parent, boolean modal, SVGRepository repository) {
        super(parent, modal);
        this.repository = repository;
        initComponents();
        loadData();
        setLevels();
        //setContext(repository.getLevels()-1);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lbCells = new javax.swing.JList<SVGCell>(new DefaultListModel<SVGCell>());
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lbAtoms = new javax.swing.JList<SVGAtom>(new DefaultListModel<SVGAtom>());
        jLabel3 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtSimilarity = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        pAtomContext = new javax.swing.JPanel();
        pContext = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        cbLevel = new javax.swing.JComboBox<Integer>();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        lbNextActions = new javax.swing.JList();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Atom comparer");

        jLabel1.setText("Cells:");

        lbCells.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lbCellsValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(lbCells);

        jLabel2.setText("Atoms:");

        lbAtoms.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lbAtomsValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(lbAtoms);

        jLabel3.setText("Similarity results:");

        txtSimilarity.setColumns(20);
        txtSimilarity.setRows(5);
        jScrollPane4.setViewportView(txtSimilarity);

        jLabel4.setText("Current context:");

        pAtomContext.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pAtomContext.setMaximumSize(new java.awt.Dimension(350, 350));
        pAtomContext.setMinimumSize(new java.awt.Dimension(350, 350));
        pAtomContext.setPreferredSize(new java.awt.Dimension(350, 350));

        javax.swing.GroupLayout pAtomContextLayout = new javax.swing.GroupLayout(pAtomContext);
        pAtomContext.setLayout(pAtomContextLayout);
        pAtomContextLayout.setHorizontalGroup(
            pAtomContextLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 346, Short.MAX_VALUE)
        );
        pAtomContextLayout.setVerticalGroup(
            pAtomContextLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        pContext.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pContext.setMaximumSize(new java.awt.Dimension(350, 350));
        pContext.setMinimumSize(new java.awt.Dimension(350, 350));
        pContext.setPreferredSize(new java.awt.Dimension(350, 350));

        javax.swing.GroupLayout pContextLayout = new javax.swing.GroupLayout(pContext);
        pContext.setLayout(pContextLayout);
        pContextLayout.setHorizontalGroup(
            pContextLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        pContextLayout.setVerticalGroup(
            pContextLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 346, Short.MAX_VALUE)
        );

        jLabel5.setText("Atom context:");

        cbLevel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbLevelActionPerformed(evt);
            }
        });

        jLabel6.setText("Level:");

        jScrollPane5.setViewportView(lbNextActions);

        jLabel7.setText("Following actions:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                            .addComponent(jLabel7))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(pAtomContext, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel3))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 156, Short.MAX_VALUE)
                                        .addComponent(jLabel6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cbLevel, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(pContext, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(jScrollPane4)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(117, 117, 117)
                        .addComponent(jLabel2)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(cbLevel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(pAtomContext, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING))
                    .addComponent(pContext, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                    .addComponent(jScrollPane4))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void lbCellsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lbCellsValueChanged
        final SVGCell cell = lbCells.getSelectedValue();
        lbAtoms.setModel(new AbstractListModel<SVGAtom>() {
            @Override
            public int getSize() {
                return cell.getAtoms().size();
            }

            @Override
            public SVGAtom getElementAt(int i) {
                return cell.getAtoms().get(i);
            }
        });
    }//GEN-LAST:event_lbCellsValueChanged

    private void lbAtomsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lbAtomsValueChanged
        pAtomContext.removeAll();
        if (lbAtoms.getSelectedIndex() >= 0) {
            final SVGAtom atom = lbAtoms.getSelectedValue();
            lbNextActions.setModel(new AbstractListModel() {

                @Override
                public int getSize() {
                    return atom.getNextActions().size();
                }

                @Override
                public Object getElementAt(int i) {
                    return atom.getNextActions().get(i);
                }
            });
            pAtomContext.setLayout(new GridLayout(1,1));
            pAtomContext.add(getVisualizationElement(atom.getGraph()));
        }
        pAtomContext.revalidate();
        compareAtomWithContext();
    }//GEN-LAST:event_lbAtomsValueChanged

    private void cbLevelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbLevelActionPerformed
        currentLevel = cbLevel.getSelectedIndex();
        setContext(currentLevel);
        compareAtomWithContext();
    }//GEN-LAST:event_cbLevelActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<Integer> cbLevel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JList<SVGAtom> lbAtoms;
    private javax.swing.JList<SVGCell> lbCells;
    private javax.swing.JList lbNextActions;
    private javax.swing.JPanel pAtomContext;
    private javax.swing.JPanel pContext;
    private javax.swing.JTextArea txtSimilarity;
    // End of variables declaration//GEN-END:variables

    private void loadData() {
        DefaultListModel<SVGCell> model = (DefaultListModel<SVGCell>)lbCells.getModel();
        for (SVGCell cell : SVGAtomStore.getInstance().getCells().values()) {
            model.addElement(cell);
        }
    }
    
    private void setLevels() {
        DefaultComboBoxModel<Integer> model = new DefaultComboBoxModel<>();
        for (int i=0; i< repository.getLevels(); i++) {
            model.addElement(i);
        }
        cbLevel.setModel(model);
    }

    /**
     * Sets the context to be displayed
     * @param level 
     */
    private void setContext(int level) {
        pContext.removeAll();
        currentLevel = level;
        cbLevel.setSelectedIndex(level);
        BasicVisualizationServer<SVGElement, SVGEdge> visualizationElement = 
                getVisualizationElement(repository.getContext().getContextGraph(level));
        pContext.setLayout(new GridLayout(1,1));
        pContext.add(visualizationElement);
        pContext.revalidate();
    }
    
    private BasicVisualizationServer<SVGElement, SVGEdge> getVisualizationElement(Graph<SVGElement, SVGEdge> graph) {
        VisualizationViewer<SVGElement, SVGEdge> vv;
        Layout<SVGElement, SVGEdge> layout = new CircleLayout<>(graph);
        layout.setSize(new Dimension(300,300));
        vv = new VisualizationViewer<>(layout);
        vv.setPreferredSize(new Dimension(350,350));
        vv.getRenderContext().setVertexLabelTransformer(new Transformer<SVGElement, String>() {
            @Override
            public String transform(SVGElement i) {
                if (i instanceof SimpleElement) {
                    SimpleElement e = (SimpleElement)i;
                    return e.getID() + " (" + e.getNoElements() + ")";
                }
                return i.getID();
            }            
        });
        vv.getRenderContext().setEdgeLabelTransformer(new Transformer<SVGEdge, String>() {
            @Override
            public String transform(SVGEdge i) {
                return i.getType().name();
            }
        });
        vv.getRenderer().getVertexLabelRenderer().setPosition(edu.uci.ics.jung.visualization.renderers.Renderer.VertexLabel.Position.CNTR);
        
        DefaultModalGraphMouse gm = new DefaultModalGraphMouse();
        gm.setMode(ModalGraphMouse.Mode.PICKING);
        vv.setGraphMouse(gm);
        
        return vv;
    }

    private void compareAtomWithContext() {
        SVGAtom atom = lbAtoms.getSelectedValue();
        if (atom != null) {
            Map<SVGAtom, Graph<SVGElement, SVGEdge>> atomContexts = SVGAtomStore.getInstance().getAtomContexts();
            Graph<SVGElement, SVGEdge> atomGraph = atomContexts.get(atom);
            Graph<SVGElement, SVGEdge> contextGraph = repository.getContext().getContextGraph(currentLevel);
            if (atomGraph != null && contextGraph != null) {
                SimilarityResult similarity = GraphUtils.calculateSimilarity(atomGraph, contextGraph);
                similarity.atom = atom;
                txtSimilarity.setText(similarity.toString());
                txtSimilarity.append("\nContext ID: " + atom.getContextID() + "\nIs action atom: " + atom.isActionLevel());
            }
            else {
                txtSimilarity.setText("");
            }
        }
        else {
            txtSimilarity.setText("");
        }
    }
}