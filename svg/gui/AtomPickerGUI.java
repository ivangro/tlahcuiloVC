package svg.gui;

import edu.uci.ics.jung.algorithms.layout.CircleLayout;
import edu.uci.ics.jung.algorithms.layout.Layout;
import edu.uci.ics.jung.graph.Graph;
import edu.uci.ics.jung.visualization.BasicVisualizationServer;
import edu.uci.ics.jung.visualization.VisualizationViewer;
import edu.uci.ics.jung.visualization.control.DefaultModalGraphMouse;
import edu.uci.ics.jung.visualization.control.ModalGraphMouse;
import edu.uci.ics.jung.visualization.picking.PickedState;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.*;
import javax.swing.*;
import org.apache.commons.collections15.Transformer;
import svg.context.SVGEdge;
import svg.context.SimpleElement;
import svg.core.SVGElement;
import svg.core.SVGRepository;
import svg.engagement.*;


/**
 * GUI to compare atoms. Allows the user to select one following action to apply to the current composition.
 * For this purpose the highest available context of the drawing is employed to retrieve its similar atoms, 
 * and from these atoms, one is picked to be applied to the drawing.
 * @author Ivan Guerrero
 */
public class AtomPickerGUI extends javax.swing.JDialog {
    private SVGRepository repository;
    private int currentLevel;
    private EngagementUtils utils;
    private DefaultListModel<AtomWrapper> atomsModel;
    private SVGAtom actionAtom;
    private Map<SVGAtom, Graph<SVGElement, SVGEdge>> atomContexts;
    private IRefreshData container;
    
    /**
     * Creates new form AtomPickerGUI
     */
    public AtomPickerGUI(java.awt.Frame parent, boolean modal, SVGRepository repository, IRefreshData container) {
        super(parent, modal);
        this.repository = repository;
        this.container = container;
        utils = new EngagementUtils();
        atomContexts = SVGAtomStore.getInstance().getAtomContexts();
        initComponents();
        setLevels();
        setContext(repository.getLevels()-1);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lbAtoms = new javax.swing.JList<AtomWrapper>(new DefaultListModel<AtomWrapper>());
        pAtom = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        pContext = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        pActionAtom = new javax.swing.JPanel();
        pActionContext = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        cbLevel = new javax.swing.JComboBox();
        bttnApply = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        lbNextActions = new javax.swing.JList(new DefaultListModel());
        lblSimilarity = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtActionAtomLevel = new javax.swing.JLabel();
        lblActionSimilarity = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Atom comparer");

        jLabel1.setText("Atoms available:");

        lbAtoms.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        lbAtoms.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lbAtomsValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(lbAtoms);

        pAtom.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pAtom.setPreferredSize(new java.awt.Dimension(300, 300));

        javax.swing.GroupLayout pAtomLayout = new javax.swing.GroupLayout(pAtom);
        pAtom.setLayout(pAtomLayout);
        pAtomLayout.setHorizontalGroup(
            pAtomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 296, Short.MAX_VALUE)
        );
        pAtomLayout.setVerticalGroup(
            pAtomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 296, Short.MAX_VALUE)
        );

        jLabel2.setText("Atom selected");

        pContext.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pContext.setPreferredSize(new java.awt.Dimension(300, 300));

        javax.swing.GroupLayout pContextLayout = new javax.swing.GroupLayout(pContext);
        pContext.setLayout(pContextLayout);
        pContextLayout.setHorizontalGroup(
            pContextLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 296, Short.MAX_VALUE)
        );
        pContextLayout.setVerticalGroup(
            pContextLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 296, Short.MAX_VALUE)
        );

        jLabel3.setText("Current Context");

        pActionAtom.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pActionAtom.setPreferredSize(new java.awt.Dimension(300, 300));

        javax.swing.GroupLayout pActionAtomLayout = new javax.swing.GroupLayout(pActionAtom);
        pActionAtom.setLayout(pActionAtomLayout);
        pActionAtomLayout.setHorizontalGroup(
            pActionAtomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 296, Short.MAX_VALUE)
        );
        pActionAtomLayout.setVerticalGroup(
            pActionAtomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 250, Short.MAX_VALUE)
        );

        pActionContext.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pActionContext.setPreferredSize(new java.awt.Dimension(300, 300));

        javax.swing.GroupLayout pActionContextLayout = new javax.swing.GroupLayout(pActionContext);
        pActionContext.setLayout(pActionContextLayout);
        pActionContextLayout.setHorizontalGroup(
            pActionContextLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 296, Short.MAX_VALUE)
        );
        pActionContextLayout.setVerticalGroup(
            pActionContextLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 250, Short.MAX_VALUE)
        );

        jLabel4.setText("Following action");

        jLabel5.setText("Level:");

        cbLevel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbLevelActionPerformed(evt);
            }
        });

        bttnApply.setText("Apply");
        bttnApply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttnApplyActionPerformed(evt);
            }
        });

        lbNextActions.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        jScrollPane2.setViewportView(lbNextActions);

        lblSimilarity.setText("0%");

        jLabel6.setText("Action Atom");

        txtActionAtomLevel.setText("Level:");

        lblActionSimilarity.setText("Similarity:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(bttnApply))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel4))
                        .addGap(0, 91, Short.MAX_VALUE)))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblActionSimilarity)
                        .addGap(35, 35, 35)
                        .addComponent(txtActionAtomLevel))
                    .addComponent(pActionAtom, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pAtom, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblSimilarity)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(113, 113, 113)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbLevel, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(pContext, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(pActionContext, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 17, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel5)
                    .addComponent(cbLevel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSimilarity))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pContext, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pAtom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1))
                .addGap(1, 1, 1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtActionAtomLevel)
                    .addComponent(lblActionSimilarity))
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pActionAtom, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pActionContext, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(bttnApply)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void lbAtomsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lbAtomsValueChanged
        pAtom.removeAll();
        if (lbAtoms.getSelectedIndex() >= 0) {
            AtomWrapper wrapper = lbAtoms.getSelectedValue();
            pAtom.setLayout(new GridLayout(1,1));
            pAtom.add(getVisualizationElement(wrapper.atom.getGraph()));
            lblSimilarity.setText(wrapper.similarity + "%");
            actionAtom = SVGAtomStore.getInstance().findActionAtom(wrapper.atom);
            if (actionAtom != null) {
                pActionAtom.removeAll();
                pActionAtom.setLayout(new GridLayout(1,1));
                pActionAtom.add(getVisualizationElement(actionAtom.getGraph()));
                pActionAtom.revalidate();
                txtActionAtomLevel.setText("Level: " + actionAtom.getLevel());
                calculateSimilarity();
                pActionContext.revalidate();
                
                lbNextActions.setModel(new AbstractListModel() {
                    @Override
                    public int getSize() {
                        return actionAtom.getNextActions().size();
                    }
                    @Override
                    public Object getElementAt(int i) {
                        return actionAtom.getNextActions().get(i);
                    }
                });
            }
        }
        pAtom.revalidate();
    }//GEN-LAST:event_lbAtomsValueChanged

    private void bttnApplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttnApplyActionPerformed
        utils.applyAction(repository, actionAtom);
        container.refreshData();
        setLevels();
        cbLevel.setSelectedIndex(cbLevel.getModel().getSize()-1);
    }//GEN-LAST:event_bttnApplyActionPerformed

    private void cbLevelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbLevelActionPerformed
        currentLevel = cbLevel.getSelectedIndex();
        setContext(currentLevel);
        fillAtoms();
    }//GEN-LAST:event_cbLevelActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bttnApply;
    private javax.swing.JComboBox cbLevel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<AtomWrapper> lbAtoms;
    private javax.swing.JList lbNextActions;
    private javax.swing.JLabel lblActionSimilarity;
    private javax.swing.JLabel lblSimilarity;
    private javax.swing.JPanel pActionAtom;
    private javax.swing.JPanel pActionContext;
    private javax.swing.JPanel pAtom;
    private javax.swing.JPanel pContext;
    private javax.swing.JLabel txtActionAtomLevel;
    // End of variables declaration//GEN-END:variables

    private void setLevels() {
        DefaultComboBoxModel<Integer> model = new DefaultComboBoxModel<>();
        for (int i=0; i< repository.getLevels(); i++) {
            model.addElement(i);
        }
        cbLevel.setModel(model);
    }

    /**
     * Sets the context to be displayed
     * @param level 
     */
    private void setContext(int level) {
        pContext.removeAll();
        currentLevel = level;
        cbLevel.setSelectedIndex(level);
        BasicVisualizationServer<SVGElement, SVGEdge> visualizationElement = 
                getVisualizationElement(repository.getContext().getContextGraph(level));
        pContext.setLayout(new GridLayout(1,1));
        pContext.add(visualizationElement);
        pContext.revalidate();
    }

    /**
     * Obtains the atoms available similar to the context at the level selected by the user
     */
    private void fillAtoms() {
        atomsModel = new DefaultListModel<>();
        List<SimilarityResult> similarAtoms = utils.obtainSimilarAtoms(repository, currentLevel);
        for (SimilarityResult result : similarAtoms) {
            atomsModel.addElement(new AtomWrapper(result.atom, result.similarity));
        }
        lbAtoms.setModel(atomsModel);
        lbAtoms.revalidate();
    }
    
    private BasicVisualizationServer<SVGElement, SVGEdge> getVisualizationElement(Graph<SVGElement, SVGEdge> graph) {
        VisualizationViewer<SVGElement, SVGEdge> vv;
        Layout<SVGElement, SVGEdge> layout = new CircleLayout<>(graph);
        layout.setSize(new Dimension(300,300));
        vv = new VisualizationViewer<>(layout);
        vv.setPreferredSize(new Dimension(350,350));
        vv.getRenderContext().setVertexLabelTransformer(new Transformer<SVGElement, String>() {
            @Override
            public String transform(SVGElement i) {
                if (i instanceof SimpleElement) {
                    SimpleElement e = (SimpleElement)i;
                    return e.getID() + " (" + e.getNoElements() + ")";
                }
                return i.getID();
            }            
        });
        vv.getRenderContext().setEdgeLabelTransformer(new Transformer<SVGEdge, String>() {
            @Override
            public String transform(SVGEdge i) {
                return i.getType().name();
            }
        });
        vv.getRenderer().getVertexLabelRenderer().setPosition(edu.uci.ics.jung.visualization.renderers.Renderer.VertexLabel.Position.CNTR);
        
        DefaultModalGraphMouse gm = new DefaultModalGraphMouse();
        gm.setMode(ModalGraphMouse.Mode.PICKING);
        vv.setGraphMouse(gm);
        PickedState<SVGElement> pickedState = vv.getPickedVertexState();
        pickedState.addItemListener(new ItemListener() {

            @Override
            public void itemStateChanged(ItemEvent ie) {
                Object obj = ie.getItem();
                if (obj instanceof SVGElement) {
                    SVGElement elem = (SVGElement)obj;
                    String text = elem.toStringWithValues();
                    //txtElement.setText(text.replaceAll("\t", "\n"));
                }
            }
        });
        return vv;
        
    }

    /**
     * Determines the similarity between the selected atom and the selected context
     */
    private void calculateSimilarity() {
        //Obtains the graphs for the context and the atom
        Graph<SVGElement, SVGEdge> actionContextGraph = repository.getContext().getContextGraph(actionAtom.getLevel());
        Graph<SVGElement, SVGEdge> atomGraph = atomContexts.get(actionAtom);
        if (atomGraph != null && actionContextGraph != null) {
            SimilarityResult similarity = GraphUtils.calculateSimilarity(atomGraph, actionContextGraph);
            if (similarity != null) {
                lblActionSimilarity.setText("Similarity: " + similarity.similarity + "%");
            }
            else {
                lblActionSimilarity.setText("Similarity: 0.0%");
            }
        }
        else {
            lblActionSimilarity.setText("Similarity: 0.0%");
        }
        //Displays the context on the same level where the action to create the atom took place
        pActionContext.removeAll();
        pActionContext.setLayout(new GridLayout(1,1));
        if (actionContextGraph != null) {
            pActionContext.add(getVisualizationElement(actionContextGraph));
        }
        else {
            pActionContext.add(new JLabel(""));
        }
    }
}
class AtomWrapper {
    public SVGAtom atom;
    public double similarity;
    
    public AtomWrapper(SVGAtom atom, double similarity) {
        this.atom = atom;
        this.similarity = similarity;
    }
    
    @Override
    public String toString() {
        return atom.toString();
    }
}